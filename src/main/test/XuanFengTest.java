import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Map;
import java.util.TreeMap;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 */

public class XuanFengTest {
    public static final String CONTENT ="";
    public static final String CONTENT2 ="Qv52Cxues17GH0Y3UFbeUDm5TTbuHorcvj+cRx1dXSn57ud3qsI/1fCFA9Xd8t7XQ0iIWS8UGX1RMy1nhctgidvqFjJbboHtgoydDt5Ieiwx4mByzPzIPDeaENGmlQD54vBhO5+GfqRvXGPqaoFAB6lEykT7A2FgCIxpou4mdoudXcEzWbeTsutstXN6LZZeITgLtejoIhdYfDeewoajz9mkvgAloFqfsHPfinkdS51K7zgAtm+m80eNDBLzyxWgDDrafryq+4dn9qi6T6DYRIdE3fGPa11CwI21Z4qfoASKNh0e+tfCz1hcyfBnB/q2TGgHRzc4H/AtJ8kU2YC2XPeotY9yz/OylaWwk1qxHYmYCSgySP9ilE0UKL4fmbe3pa5pzU7c9/qhbSXaTgG3zELbJBEjVbHS3spNnq9lTS9H2bULujQkyImjGOFRu6aGvmgUcUyehk/LeUVzFMWVZ0rNys5e46WwFUgcWQxpCvoL2wttLYf+4kXOMf3O+tU3WzjSRfkoTXlGVCXFBeDLjFOgsOUQGAUwgE615Ry9Wg8mLJWa7InUTKO4yAaLQfE+LP0EpSnZFM7WvG0FyKMYDBsKqibquRXG4Z/e1NQR/cUds/AgSdTVb3eQlpp8a12R4i3t2Odi/67t6v/qAtpGIEJftW1fGqHnRa9e2i0gWo4wn28lBYwqgF6oPNT/OQYR";
    public static final String CONTENT3 ="RrzAWX/YjZTUWnpfa2d0Z1mXekqb+ogMaPDLynhqDDd7xe8JuJh90xqGcnXTtyLQehHbc7ySv6mhFQG0fUuETA==";
    public static final String CONTENT4 ="RrzAWX/YjZTUWnpfa2d0Z1mXekqb+ogMaPDLynhqDDcAquzSFTGI/7JMAkJcxKor7tYBsVG3YY/3jYdQCbI9IA==";

    public static void countChar(String content){
        char[] array = content.toCharArray();
        Map<String,Integer> map = new TreeMap<>();

        for (char c : array) {
            String charString = String.valueOf(c);
            Integer count = map.get(charString);
            if(count == null){
                map.put(charString,1);
            }else{
                map.put(charString,count + 1);
            }

        }

        map.forEach((k,v)->{
            System.out.println(String.format(" %s : %s",k,v ));
        });
    }

    public static final String KEY = "awdtif20190619ti";

    public static void decrypt(String content) throws NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
        byte[] arrayOfByte3 = KEY.getBytes("UTF-8");
        SecretKeySpec secretKeySpec = new SecretKeySpec(arrayOfByte3, "AES");
        byte[] arrayOfByte2 = KEY.getBytes("UTF-8");

        IvParameterSpec ivParameterSpec = new IvParameterSpec(arrayOfByte2);
        cipher.init(2, (Key)secretKeySpec, (AlgorithmParameterSpec)ivParameterSpec);
        byte[] arrayOfByte1 = cipher.doFinal(Base64Util.decode(content, 0));
        System.out.println(new String(arrayOfByte1,"UTF-8"));

    }

    public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        decrypt(CONTENT);
        decrypt(CONTENT2);
        decrypt(CONTENT3);
        decrypt(CONTENT4);
    }

}
